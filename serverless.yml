service: serverless-jinnai

# plugins:
#   - serverless-python-requirements

custom:
  # pythonRequirements:
  #   dockerizePip: true
  #   dockerImage: lambci/lambda:build-python3.9
  #   useStaticCache: false
  #   useDownloadCache: false
  #   layer: true
  deploymentBucket:
    name: ${env:DEPLOY_BUCKET}
  vrc_video_table: ${env:DDB_TABLE}

provider:
  name: aws
  runtime: python3.9
  provider: ${opt:stage}
  lambdaHashingVersion: 20201221
  region: ap-northeast-1
  role: ${env:LAMBDA_IAM}
  timeout: 30
  logRetentionInDays: 14
  tracing:
    apiGateway: true
    lambda: true

package:
  individually: true
  exclude:
    - node_modules/**
    - doc/**
    - .gitignore
    - package-lock.json
    - requirements.txt
    - serverless.yml
    - .env
    - memo.txt

functions:
  get_quest_url:
    handler: src/lambda/get_quest_url/handler.main
    package:
      include:
        - src/lambda/get_quest_url/handler.py
        - src/lambda/get_quest_url/yt-dlp
      exclude:
        - src/**
    environment:
      VRC_VIDEO_TABLE: ${self:custom.vrc_video_table}
    events:
      - http:
          path: /q
          method: get
          cors: true
      - http:
          path: /q
          method: head
          cors: true
# resources:
#   Resources:
#     独自テーブルは持たず他テーブルを利用するためコメントアウト
#     vrcQuestTable:
#       Type: "AWS::DynamoDB::Table"
#       Properties:
#         TableName: ${self:service}-${opt:stage}-table
#         AttributeDefinitions:
#           - AttributeName: user_id
#             AttributeType: S
#           - AttributeName: video_id
#             AttributeType: S
#         KeySchema:
#           - AttributeName: user_id
#             KeyType: HASH
#           - AttributeName: video_id
#             KeyType: RANGE
#         ProvisionedThroughput:
#           ReadCapacityUnits: 3
#           WriteCapacityUnits: 2
#         TimeToLiveSpecification:
#           AttributeName: TTL
#           Enabled: True
